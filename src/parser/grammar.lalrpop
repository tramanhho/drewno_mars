use crate::scanner::tokens::{TokenType, LexingError};
use crate::parser::ast::*;
use crate::parser::ast::span::Span;
grammar;

extern {
  type Location = usize;
  type Error = LexingError;

  enum TokenType {
    "AND" => TokenType::AND,
    "MAGIC" => TokenType::MAGIC,
    "BOOL" => TokenType::BOOL,
    "ELSE" => TokenType::ELSE,
    "FALSE" => TokenType::FALSE,
    "IF" => TokenType::IF,
    "INT" => TokenType::INT,
    "GIVE" => TokenType::GIVE,
    "TAKE" => TokenType::TAKE,
    "OR" => TokenType::OR,
    "PERFECT" => TokenType::PERFECT,
    "RETURN" => TokenType::RETURN,
    "CLASS" => TokenType::CLASS,
    "TRUE" => TokenType::TRUE,
    "EXIT" => TokenType::EXIT,
    "VOID" => TokenType::VOID,
    "WHILE" => TokenType::WHILE,
    "ID" => TokenType::ID(<String>),
    "INTLITERAL" => TokenType::INTLITERAL(<i32>),
    "STRINGLITERAL" => TokenType::STRINGLITERAL(<String>),
    "ASSIGN" => TokenType::ASSIGN,
    "COLON" => TokenType::COLON,
    "COMMA" => TokenType::COMMA,
    "CROSS" => TokenType::CROSS,
    "DASH" => TokenType::DASH,
    "EQUALS" => TokenType::EQUALS,
    "GREATER" => TokenType::GREATER,
    "GREATEREQ" => TokenType::GREATEREQ,
    "LCURLY" => TokenType::LCURLY,
    "LESS" => TokenType::LESS,
    "LESSEQ" => TokenType::LESSEQ,
    "LPAREN" => TokenType::LPAREN,
    "NOT" => TokenType::NOT,
    "NOTEQUALS" => TokenType::NOTEQUALS,
    "POSTDEC" => TokenType::POSTDEC,
    "POSTINC" => TokenType::POSTINC,
    "RCURLY" => TokenType::RCURLY,
    "RPAREN" => TokenType::RPAREN,
    "SEMICOL" => TokenType::SEMICOL,
    "SLASH" => TokenType::SLASH,
    "STAR" => TokenType::STAR,
  }
}

Comma<T>: Vec<T> = { 
    <mut v:(<T> "COMMA")*> <e:T> => {
        v.push(e);
        return v;
    },
    => Vec::new()
};

pub Program: Box<Program> = {
     <globals:Decl*>=> Box::new(Program{ globals } )
}

pub Decl: Box<Decl> = {
    <v:VarDecl> => Box::new(Decl::VarDecl(v)),
    ClassDecl => Box::new(Decl::ClassDecl(<>)),
    FnDecl => Box::new(Decl::FnDecl(<>)),
}

pub VarDecl: Box<VarDecl> = {
    <id:Id> "COLON" <var_type: Type> "SEMICOL" => Box::new(
        VarDecl {
            id, 
            var_type,
            init_val: None,
            // pos: id.span
        }
    ),
    <id:Id> "COLON" <var_type: Type> "ASSIGN" <init_val: Exp> "SEMICOL" => {
        Box::new(
            VarDecl {
                id, 
                var_type,
                init_val: Some(init_val),
                // pos: id.span
            }
        )
    },
}

pub Type: Box<Type> = {
    PrimType => Type::new(TypeKind::Prim(<>), false),
    Id => Type::new(TypeKind::Class(<>), false),
    "PERFECT" <prim_type: PrimType> => Type::new(TypeKind::Prim(prim_type), true),
    "PERFECT" <name:Id> => Type::new(TypeKind::Class(name), true),
}

pub PrimType: PrimType = {
    "INT" => PrimType::Int,
    "BOOL" => PrimType::Bool,
    "VOID" => PrimType::Void,
}

pub ClassDecl: Box<ClassDecl> = {
    <id:Id> "COLON" "CLASS" "LCURLY" <member_f:ClassBody> "RCURLY" "SEMICOL" => Box::new(
        ClassDecl {
            id,
            member_f: Box::new(member_f),
        }
    ),
}

pub ClassBody: Vec<Box<Decl>> = {
    <mut vec:(Decl)*> <new_var:VarDecl> => {
        vec.push(Box::new(Decl::VarDecl(new_var)));
        vec
    },
    <mut vec:(Decl)*> <new_fn:FnDecl> => {
        vec.push(Box::new(Decl::FnDecl(new_fn)));
        vec
    },
    => Vec::<Box<Decl>>::new(),
}


pub FnDecl: Box<FnDecl> = {
    <id:Id> "COLON" "LPAREN" <args:FormalsList> "RPAREN" <ret:Type> "LCURLY" <body:StmtList> "RCURLY" => Box::new(
        FnDecl {
            id, args, ret, body
        }
    ),
}

pub FormalsList = {
    Comma<FormalDecl>
    // see if we need to do epsilon later 
    // as of right now, a formalsList/formals node will NOT be created
    // this should be fine because FormalsNode/FormalsListNode isn't a thing in the inheritance/collaboration diagram
}

pub FormalDecl: Box<FormalDecl> = {
    <id:Id> "COLON" <formal_type: Type> => Box::new(
        FormalDecl::FormalDecl {
            id, 
            formal_type
        }
    ),
}

pub StmtList: Vec<Box<Stmt>> = {
    <stmts:Stmt*> => stmts
}

pub Stmt: Box<Stmt> = {
    <bs:BlockStmt> => Box::new(Stmt::Block(bs)),
    <s:LineStmt> "SEMICOL" => Box::new(Stmt::Line(s)),
    VarDecl => Box::new(Stmt::VarDecl(<>)),
}

pub BlockStmt: Box<BlockStmt> = {
    "WHILE" "LPAREN" <cond: Exp> "RPAREN" "LCURLY" <body: StmtList> "RCURLY" => Box::new(
        BlockStmt::While{cond, body}
    ),
    "IF" "LPAREN" <cond: Exp> "RPAREN" "LCURLY" <body: StmtList> "RCURLY" => Box::new(
        BlockStmt::If{cond, body}
    ),
    "IF" "LPAREN" <cond: Exp> "RPAREN" "LCURLY" <true_branch: StmtList> "RCURLY" 
    "ELSE" "LCURLY" <false_branch: StmtList> "RCURLY" => Box::new(
        BlockStmt::IfElse{cond, true_branch, false_branch}
    ),
}

pub LineStmt: Box<LineStmt> = {
    // use LineStmtKind::*;

    <l:@L> <dest:Loc> "ASSIGN" <src:Exp> <r:@R> => LineStmt::new(LineStmtKind::Assign{dest, src}, l, r),
    <l:@L> <loc:Loc> "POSTDEC" <r:@R>           => LineStmt::new(LineStmtKind::PostDec{loc}, l, r),
    <l:@L> <loc:Loc> "POSTINC" <r:@R>           => LineStmt::new(LineStmtKind::PostInc{loc}, l, r),
    <l:@L> "GIVE" <output:Exp> <r:@R>           => LineStmt::new(LineStmtKind::Give{output}, l, r),
    <l:@L> "TAKE" <recipient:Loc> <r:@R>        => LineStmt::new(LineStmtKind::Take{recipient}, l, r),
    <l:@L> "RETURN" <result:Exp> <r:@R>         => LineStmt::new(LineStmtKind::Return{result: Some(result)}, l, r),
    <l:@L> "RETURN" <r:@R>                      => LineStmt::new(LineStmtKind::Return{result: None}, l, r),
    <l:@L> "EXIT" <r:@R>                        => LineStmt::new(LineStmtKind::Exit, l, r),
    <l:@L> <fn_call: CallExp> <r:@R>            => LineStmt::new(LineStmtKind::Call(fn_call), l, r),
}

pub Exp: Box<Exp> = {
    // #[precedence(level="2")] #[assoc(side="right")]
    <l:@L> <lhs:Term> "EQUALS" <rhs:Exp> <r:@R> => Exp::new(
        Box::new(ExpKind::BinaryExp(BinaryExp::new(
            lhs,
            rhs,
            BinaryExpKind::Equals, l, r
        ))), l, r
    ),

    <l:@L> <lhs:Term> "NOTEQUALS" <rhs:Exp> <r:@R> => Exp::new(
        Box::new(ExpKind::BinaryExp(BinaryExp::new(
            lhs,
            rhs,
            BinaryExpKind::NotEquals, l, r
        ))), l, r
    ),

    <l:@L> <lhs:Term> "GREATER" <rhs:Exp> <r:@R> => Exp::new(
        Box::new(ExpKind::BinaryExp(BinaryExp::new(
            lhs,
            rhs,
            BinaryExpKind::Greater, l, r
        ))), l, r
    ),

    <l:@L> <lhs:Term> "GREATEREQ" <rhs:Exp> <r:@R> => Exp::new(
        Box::new(ExpKind::BinaryExp(BinaryExp::new(
            lhs,
            rhs,
            BinaryExpKind::GreaterEq, l, r
        ))), l, r
    ),

    <l:@L> <lhs:Term> "LESS" <rhs:Exp> <r:@R> => Exp::new(
        Box::new(ExpKind::BinaryExp(BinaryExp::new(
            lhs,
            rhs,
            BinaryExpKind::Less, l, r
        ))), l, r
    ),

    <l:@L> <lhs:Term> "LESSEQ" <rhs:Exp> <r:@R> => Exp::new(
        Box::new(ExpKind::BinaryExp(BinaryExp::new(
            lhs,
            rhs,
            BinaryExpKind::LessEq, l, r
        ))), l, r
    ),

    // #[precedence(level="1")]
    BabyExp,
};

pub BabyExp: Box<Exp> = {
    <l:@L> <lhs:Term> "DASH" <rhs:Exp> <r:@R> => Exp::new(
        Box::new(ExpKind::BinaryExp(BinaryExp::new(
            lhs, rhs, BinaryExpKind::Minus, l, r
        ))), l, r
    ),

    <l:@L> <lhs:Term> "CROSS" <rhs:Exp> <r:@R> => Exp::new(
        Box::new(ExpKind::BinaryExp(BinaryExp::new(
            lhs, rhs, BinaryExpKind::Plus, l, r
        ))), l, r
    ),

    <l:@L> <lhs:Term> "STAR" <rhs:Exp> <r:@R> => Exp::new(
        Box::new(ExpKind::BinaryExp(BinaryExp::new(
            lhs, rhs, BinaryExpKind::Times, l, r
        ))), l, r
    ),

    <l:@L> <lhs:Term> "SLASH" <rhs:Exp> <r:@R> => Exp::new(
        Box::new(ExpKind::BinaryExp(BinaryExp::new(
            lhs, rhs, BinaryExpKind::Divide, l, r
        ))), l, r
    ),

    <l:@L> <lhs:Term> "AND" <rhs:Exp> <r:@R> => Exp::new(
        Box::new(ExpKind::BinaryExp(BinaryExp::new(
            lhs, rhs, BinaryExpKind::And, l, r
        ))), l, r
    ), 

    <l:@L> <lhs:Term> "OR" <rhs:Exp> <r:@R> => Exp::new(
        Box::new(ExpKind::BinaryExp(BinaryExp::new(
            lhs, rhs, BinaryExpKind::Or, l, r
        ))), l, r
    ), 

    <l:@L> "NOT" <exp:Exp> <r:@R> => Exp::new(
        Box::new(ExpKind::UnaryExp(UnaryExp::new(
            exp, UnaryExpKind::Not, l, r
        ))), l, r
    ), 

    <l:@L> "DASH" <exp:Exp> <r:@R> => Exp::new(
        Box::new(ExpKind::UnaryExp(UnaryExp::new(
            exp, UnaryExpKind::Neg, l, r
        ))), l, r
    ), 
    
    Term,
};

pub CallExp: Box<CallExp> = {
    <l:@L> <name:Loc> "LPAREN" <args:ActualsList> "RPAREN" <r:@R> => Box::new(
        CallExp {
            name,
            args: args,
            fn_type: None,
            span: Span::new(l, r) 
        }
    ),
};

pub ActualsList = {
    Comma<Exp>
};


pub Term: Box<Exp> = {
    <l:@L> <loc: Loc>                 <r:@R> => Exp::new(ExpKind::new(ExpKind::Loc(loc)), l, r),
    <l:@L> <val:"INTLITERAL">         <r:@R> => Exp::new_with_type(ExpKind::new(ExpKind::IntLit(val)), PrimType::Int, l, r),
    <l:@L> <string:"STRINGLITERAL">   <r:@R> => Exp::new_with_type(ExpKind::new(ExpKind::StrLit(string)), PrimType::String, l, r),
    <l:@L> "TRUE"                     <r:@R> => Exp::new_with_type(ExpKind::new(ExpKind::True), PrimType::Bool, l, r),
    <l:@L> "FALSE"                    <r:@R> => Exp::new_with_type(ExpKind::new(ExpKind::False), PrimType::Bool, l, r),
    <l:@L> "MAGIC"                    <r:@R> => Exp::new_with_type(ExpKind::new(ExpKind::Magic), PrimType::Bool, l, r),
    "LPAREN" <e: Exp> "RPAREN"               => e,
    <l:@L> <callexp: CallExp>         <r:@R> => Exp::new(ExpKind::new(ExpKind::CallExp(callexp)), l, r),
};

//loc
pub Loc: Box<Loc> = {
    <l:@L> <id: Id> <r:@R> => Box::new(Loc {
        span: Span::new(l, r), 
        loc_type: None,
        kind: Box::new(LocKind::Id(id))
    }),
    <l:@L> <base_class:Loc> "POSTDEC" <field_name:Id> <r:@R> => Box::new(Loc{
        span: Span::new(l, r), 
        loc_type: None,
        kind: Box::new(LocKind::Loc{ base_class, field_name })
    }),
};

//loc
pub Id: Box<Id> = {
    <l:@L> <name:"ID"> <r:@R> => Box::new(Id{
        name,
        id_type: None,
        span: Span::new(l, r)
    })
};