grammar;

pub Term = {
    COMMENTS,
    ILLEGAL,
    //END,
    AND,
    ASSIGN,
    BOOL,
    COLON,
    COMMA,
    CLASS,
    CROSS,
    DASH,
    ELSE,
    EXIT,
    EQUALS,
    FALSE,
    GIVE,
    GREATER,
    GREATEREQ,
    ID,
    IF,
    INT,
    INTLITERAL,
    LCURLY,
    LESS,
    LESSEQ,
    LPAREN,
    MAGIC,
    NOT,
    NOTEQUALS,
    OR,
    //OPEN,
    PERFECT,
    POSTDEC,
    POSTINC,
    RETURN,
    RCURLY,
    RPAREN,
    SEMICOL,
    SLASH,
    STAR,
    STRINGLITERAL,
    TAKE,
    TRUE,
    VOID,
    WHILE
};

AND: String = r"and" => "AND".to_string();
MAGIC: String = r"24Kmagic" => "MAGIC".to_string();
BOOL: String = r"bool" => "BOOL".to_string();
ELSE: String = r"else" => "ELSE".to_string();
FALSE: String = r"false|too hot" => "FALSE".to_string();
IF: String = r"if" => "IF".to_string();
INT: String = r"int" => "INT".to_string();
GIVE: String = r"give" => "GIVE".to_string();
TAKE: String = r"take" => "TAKE".to_string();
OR: String = r"or" => "OR".to_string();
PERFECT: String = r"perfect" => "PERFECT".to_string();
RETURN: String = r"return" => "RETURN".to_string();
CLASS: String = r"class" => "CLASS".to_string();
TRUE: String = r"true" => "TRUE".to_string();
EXIT: String = r"today I don't feel like doing any work" => "EXIT".to_string();
VOID: String = r"void" => "VOID".to_string();
WHILE: String = r"while" => "WHILE".to_string();

ID: String = r"[a-zA-Z_][0-9a-zA-Z_]*" => format!("ID:{}", <>);
INTLITERAL: String = r"[0-9]+" => format!("INTLITERAL:{}", <>);
STRINGLITERAL: String = r#""(\\[nt"\\]|[^\n"\\])*""# => format!("STRINGLITERAL:{}", <>);

ASSIGN: String = r"=" => "ASSIGN".to_string();
COLON: String = r":" => "COLON".to_string();
COMMA: String = r"," => "COMMA".to_string();
CROSS: String = r"\+" => "CROSS".to_string();
DASH: String = r"-" => "DASH".to_string();
EQUALS: String = r"==" => "EQUALS".to_string();
GREATER: String = r">" => "GREATER".to_string();
GREATEREQ: String = r">=" => "GREATEREQ".to_string();
LCURLY: String = r"\{" => "LCURLY".to_string();
LESS: String = r"<" => "LESS".to_string();
LESSEQ: String = r"<=" => "LESSEQ".to_string();
LPAREN: String = r"\(" => "LPAREN".to_string();
NOT: String = r"!" => "NOT".to_string();
NOTEQUALS: String = r"!=" => "NOTEQUALS".to_string();
POSTDEC: String = r"--" => "POSTDEC".to_string();
POSTINC: String = r"\+\+" => "POSTINC".to_string();
RCURLY: String = r"}" => "RCURLY".to_string();
RPAREN: String = r"\)" => "RPAREN".to_string();
SEMICOL: String = r";" => "SEMICOL".to_string();
SLASH: String = r"\/" => "SLASH".to_string();
STAR: String = r"\*" => "STAR".to_string();

COMMENTS: String = r"\/\/.*[\n]" => "".to_string();
ILLEGAL: String = r".+" => format!("ILLEGAL:{}", <>);

match {
    r"and",
    r"24Kmagic",
    r"bool",
    r"else",
    r"false|too hot",
    r"if",
    r"int",
    r"give",
    r"take",
    r"or",
    r"perfect",
    r"return",
    r"class",
    r"true",
    r"today I don't feel like doing any work",
    r"void",
    r"while",

    r"=",
    r":",
    r",",
    r"\+",
    r"-",
    r"==",
    r">",
    r">=",
    r"\{",
    r"<",
    r"<=",
    r"\(",
    r"!",
    r"!=",
    r"--",
    r"\+\+",
    r"}",
    r"\)",
    r";",
    r"\/",
    r"\*",
}
else{
    r"[a-zA-Z_][0-9a-zA-Z_]*",
    r"[0-9]+",
    r#""(\\[nt"\\]|[^\n"\\])*""#
}
else{
    r"\/\/.*[\n]",
    r".+"
}